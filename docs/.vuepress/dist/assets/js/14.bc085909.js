(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{355:function(e,t,n){"use strict";n.r(t);var r=n(40),v=Object(r.a)({},(function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("h2",{attrs:{id:"vue3-diff"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#vue3-diff"}},[e._v("#")]),e._v(" vue3 diff")]),e._v(" "),n("p",[e._v("在响应数据发生变化事，触发对应的dep依赖watcher，最后引起render渲染，触发新旧vnode的diff，根据diff的结果去对真实dom的添加、删除、移动等操作。")]),e._v(" "),n("p",[e._v("diff算法核心也就是真正发挥作用的地方是在新旧VNode有多个children的时候。")]),e._v(" "),n("h3",{attrs:{id:"新旧子节点对比"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#新旧子节点对比"}},[e._v("#")]),e._v(" 新旧子节点对比")]),e._v(" "),n("ol",[n("li",[e._v("对于不存在key值得情况，对新旧children长度进行比对，对多余的节点进行删除或添加；如果老节点长度大于新节点，删除多出来的节点，如果新的节点长度大于老节点的数量，添加多出的检点；对于公共部分进行patch一一比对，进行dom的删除、替换等操作。")]),e._v(" "),n("li",[e._v("对于存在key值得情况，对新旧子节点两端进行对比，就是children节点队列前后缀比对，找到节点不同的的索引节点，从而决定操作dom的起止点；如果有一边节点全部比对完，那么直接对多出的节点部分进行添加删除。")]),e._v(" "),n("li",[e._v("新旧节点没有比对完，而出现了节点不同的情况，那么接下来就是对剩下不同的节点进行处理比对，这样是diff最核心的比对部分；")]),e._v(" "),n("li",[e._v("遍历剩下需要比对的新vnode，把具有key值得节点的key和其节点对应的下标以键值对形式存入对象，然后在创建一个数组，值全部为0，长度为遍历新vnode的长度；")]),e._v(" "),n("li",[e._v("然后再遍历需要比对的旧vnode节点，如果节点上key存在，从上一步key、下标生成的对象中找出要移动的节点下标newIndex；然后在上步中创建的数组中，以新节点的下标在数组中的位置为下标，存入旧节点的索引下标；也就是把0编程旧节点的索引；如果节点上key不同，只能在新对应节点中patch比对查找newIndex；如果没有找到删除点前节点；")]),e._v(" "),n("li",[e._v("根据存入索引的数组，如果有值为0，说明没有旧节点在新节点队列中的对应，创建其一个新节点；然后生成一个最长上升子序列，对其他未在稳定序列的节点进行统一移动插入操作。")])]),e._v(" "),n("blockquote",[n("p",[e._v("文章参考——"),n("a",{attrs:{href:"http://hcysun.me/vue-design/zh/essence-of-comp.html#%E7%BB%84%E4%BB%B6%E7%9A%84%E4%BA%A7%E5%87%BA%E6%98%AF%E4%BB%80%E4%B9%88",target:"_blank",rel:"noopener noreferrer"}},[e._v("渲染器"),n("OutboundLink")],1),e._v("，介绍了虚拟dom的结构、生成、渲染等内容。")])])])}),[],!1,null,null,null);t.default=v.exports}}]);